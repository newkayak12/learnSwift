import UIKit

/**
   > 데이터 타입 안심
   애플이 처음 스위프트를 발표할 때 스위프트의 특징 중 안정성을 엿볼 수 있는 부분이다. 스위프트는 타입에 굉장히 민감하고 엄격하다. 서로 다른 타입끼리의 데이터 교환은 꼭 타입 캐스팅(Type-Casting)을 거쳐야한다. 스위프트에서 값 타입의 데이터 교환은 엄밀히 말하면 타입 캐스팅이 아닌 새로운 인스턴스를 생성하여 할당하는 것이다.0

    1. 데이터 타입 안심이란
    스위프트는 데이터 타입을 안심하고 사용할 수 있는(type-safe)언어이다. 타입을 안심하고 사용할 수 있다는 말은 그만큼 실수를 줄일 수 있다는 의미이다. 예를 들어서 Int 타입 변수에 할당하려는 값이 Character 타입이라면 컴파일 오류가 발생한다. 이런 오류는 프로그래밍 도중에 눈치채기 어려워서 컴파일러가 알려주지 않으면 나주엥 오류를 찾아내기도 쉽지 않다. 그렇지만 스위프트는 컴파일 오류로 알려주므로 서로 다른 타입의 값을 할당하는 실수를 줄일 수 있다. 이렇게 스위프트가 컴파일 시 타입을 확인하는 것을 '타입 확인'이라고 한다. 타입 확인을 통해 여러 타입을 섞어 사용할 때 발생할 수 있는 런타임 오류를 피할 수도 있다.

    2. 타입 추론
    스위프트에서는 변수나 상수를 선언할 떄 특정 타입을 명시하지 않아도 컴파일러가 할당된 값을 기주능로 변수나 상수의 타입을 결정한다. 예를 들어서 let name = "YJ"이라는 코드를 작성하면, 컴파일러가 컴파일하면서 name의 타입을 String으로 결정한다.
*/

// 타입을 지정하지 않았으나 타입 추론을 통해서 name은 String 타입으로 선언된다.
var name = "YJ";

// 앞서 타입 추론에 의해 name은 String 타입의 변수로 지정되었기 떄문에
// 정수를 할당하려고 시도하면 오류가 발생한다.
// name = 100;

/**
    3. 타입 별칭
    스위프트에서 기본으로 제공하는 데이터 타입이든, 사용자가 임의로 만든 데이터 타입이든 이미 존재하는 데이터 타입에 임의로 다른 이름(별칭)을 부여할 수 있다. 그런 다음 기본 타입 이름과 이후에 추가한 별칭을 모두 사용할 수 있다.
*/
typealias MyInt = Int;
typealias YouInt = Int;
typealias MyDouble = Double;

let age: MyInt = 100; //MyInt는 Int의 또 다른 이름이다.
let year: YouInt = 2080; //YouInt는 Int의 또 다른 이름이다.

// MyInt도, YouInt도 Int이기 때문에 같은 타입으로 취급한다.
let month:Int = 7; //기존의 Int도 사용 가능하다.
let percentage:MyDouble = 9.99; // Int외의 자료형도 모두 별칭 사용이 가능하다.

/**
    4. 튜플
    '튜플(Tuple)'은 타입의 이름이 따로 지정되어있지 않은, 프로그래머 마음대로 만드는 타입이다. '지정된 데이터의 묶음'이라고 표현할 수 있다. C언어를 예로 들면 원시 구조체와 형태가 가깝다.
    스위프트의 튜플은 파이썬의 튜플과 유사하다. 튜플은 타입 이름이  따로 없으므로 일정 타입의 나열만으로 튜플 타입을 생성해줄 수 있다. 튜플에 포함될 데이터의 개수는 자유롭게 정할 수 있다. 하나가 될 수도, 두 개가 될 수도, 열 개가 될 수도 있다.
*/

//String, Int, Double 타입을 갖는 튜플
var person: (String, Int, Double) = ("YJ", 100, 12.9);

//인덱스를 통해서 값을 뺴 올 수 있다.
print("이름: \(person.0), 나이: \(person.1), 신장: \(person.2)")

person.1 = 99 //인덱스로 값을 할당할 수도 있다.
print("이름: \(person.0), 나이: \(person.1), 신장: \(person.2)")

/**
   튜플의 각 요소를 이름 대신 숫자로 표현하기 떄문에 간편해 보일 수 있지만, 차후에 다른 프로그래머가 코드를 볼 깨 각 요소가 어떤 의미가 있는지 유추하기가 어렵다. 이름 없이 인덱스만으로 각 요소의 데이터가 무엇을 나타내는 지 쉽게 파악하기 어렵기 때문이다. 그래서 튜플에 이름을 붙여줄 수 있다.
*/

var persons: (name:String, age:Int, height:Double) = ("YJ", 100, 192.2)

//요소의 이름으로 값을 뺴 올 수 있다.
print("이름: \(persons.name), 나이: \(persons.age), 신장: \(persons.height)")

persons.name = "HELLO"; //이름으로 값을 바꿀 수도 있다.
print("이름: \(persons.name), 나이: \(persons.age), 신장: \(persons.height)")

/**
    또, 튜플에는 타입 이름에 해당하는 키워드가 따로 없다 보니 사용에 불편함을 겪을 수도 있다. 매번 같은 모양의 튜플을 사용하고 싶은데 선언해줄 때마다 긴 튜플 타입을 모두 써줘야하는 불편함이 생길 수 있기 때문이다. 이럴 때 타입 별칭을 사용하여 조금 더 깔끔하게 사용할 수 있다.
*/

typealias PersonTuple = (name:String, age:Int, height:Double)

let personInfo: PersonTuple = ("yj", 190, 12);
print("이름: \(personInfo.name), 나이: \(personInfo.age), 신장: \(personInfo.height)")
