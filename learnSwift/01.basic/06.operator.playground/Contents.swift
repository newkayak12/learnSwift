import UIKit

/**
    연산자
 
 스위프트의 연산자는 특정한 문자로 표현한 함수라 할 수 있다. 따라서 특정 연산자의 역할을 프로그래머의 의도대로 변경할 수도 있다. 따라서 특정 연산자의 역할을 프로그래머의 의도대로 변경할 수도 있다.
 
 연산자에 의해 연산 되는 값의 수에 따라 단항, 이항, 삼항 등으로 구분하기도 하며, 연산자의 위치에 따라 전위, 중위, 후위 등으로 구분하기도 한다.
 
    
            분류                       설명                         예
         단항 연산자         피연산자(연산 대상)가 한 개인 연산자            !A
         이항 연산자         피연산자가 두 개인 연산자                     A + B
         삼항 연산자         피연산자가 세 개인 연산                      A? B:C
         전위 연산자         연산자가 피연산자 앞에 위치하는 연산자           !A
         중위 연산자         연산자가 피연산자 사이에 위치하는 연산자          A + B
         후위 연산자         연산자가 피연산자 뒤에 위치하는 연산             A!
     
    {
        스위프트에서는 띄어쓰기도 중요한 문법 중 하나이다. 연산자가 어디에 위치하느냐도 중요하지만, 연산자 앞과 뒤 중 어디에 공백이 있는지도 중요한 부분이다. 예를 들어, A != B와 A! = B는 전혀 다른 의미이다. 또, A > B? A : B는 잘못된 사용이며, 물음표를 B에서 띄어 써야 한다.
    }
 
 
    1. 할당 연산자
 값을 할당할 때 사용하는 연산자이다.
    
        연산자       부호      설명
      할당 연산자    A = B   A에 B의 값을 할당한다. 서로 다른 데이터 타입이라면 오류가 발생한다.
 
    2. 산술 연산자
 산술 연산자는 대체로 수학에서 쓰이는 연산자 같은 역할을 수행한다.
     
           연산자        부호       설명
        더하기 연산자    A + B    A와 B를 더한 값을 반환한다.
        뺴기 연산자     A - B    A와 B를 뺀 값을 반환한다.
        곱하기 연산자    A * B    A와 B를 곱한 값을 반환한다.
        나누기 연산자    A / B    A와 B를 나눈 값을 반환한다.
        나머지 연산자    A % B    A와 B의 나머지를 반환한다.
 
     {
            스위프트의 나머지 연산과 나누기 연산자
     
        스위프트에서는 부동소수점 타입의 나머지 연산까지 지원한다. 기존의 프로그래밍 언어에서는 아머지 연산자가 정수 타입만 지원하는 경우가 많았는데 스위프트에서는 부동소수점 타입도 나머지 연산을 할 수 있다.
     
        let number: Double = 5.0
        var result: Double = number.truncatingRemainder(dividingBy: 1.5) // 0.5
        result = 12.truncatingRemainder(dividingBy: 2.5)                 // 2.0
        
        나누기 연산은 기존의 프로그래밍 언어처럼 나머지나 소수점을 제외한 정수만 결괏값으로 반환한다.
     
        var result: Int = 5 / 3   // 1
        result  = 10 / 3          // 3
     
        또한, 스위프트는 데이터 타입에 굉장히 엄격하므로 서로 다른 자료형끼리 연산을 엄격히 제한한다. 서로 다른 자료형끼리 연산을 실행하려면 값을 해당 타입으로 변환한 후 연산해야한다. 심지어 같은 정수 타입인 Int 타입과 UInt 타입끼리의 연산도 엄격히 제한된다.
     }
    
    3. 비교 연산자
 
                연산자        부호       설명
               값이 같다.     A == B    A의 같이 B와 같은 값인지 비교하여 불리언 값을 반환한다.
            값이 크거나 같다.   A >= B    A가 B보다 크거나 같은 값인지 비교하여 불리언 값을 반환한다.
            값이 작거나 같다.   A <= B    A가 B보다 작거나 같은 값인지 비교하여 불리언 값을 반환한다.
               값이 크다.      A > B    A가 B보다 큰지 비교하여 불리언 값을 반환한다.
            값이 작다.         A < B    A가 B보다 작은지 비교하여 불리언 값을 반환한다.
            값이 같지 않다.     A != B    A와 B가 같지 않은지 비교하여 불리언 값을 반환한다.
            참조가 같다.       A === B    A와 B가 참조(레퍼런스) 타입일 때 A와 B가 같은 인스턴스를 가리키는지 비교하여 불리언으로 반환한다.
            참조가 같다.       A !== B    A와 B가 참조(레퍼런스) 타입일 때 A와 B가 같지 않은 인스턴스를 가리키는지 비교하여 불리언으로 반환한다.
            참조가 같다.       A ~= B    A와 B의 패턴이 매치되는지 확인하여 불리언 값을 반환한다.
 */
