import UIKit
import Foundation

/**
    09. Optional(옵셔널)
 
 옵셔널은 안전성을 문법으로 담보하는 기능이다. C 언어 또는 Objective-C에서는 찾아볼 수 없었던 콘셉트이다. 옵셔널은 단어 뜻 그대로 '선택적인', 즉 값 '있을 수도, 없을 수도 있음을 나타내는 표현이다. 이는 '변수나 상수 등에 꼭 값이 있다는 것을 보장할 수 없다 즉, 변수 또는 상수의 값이 nil일 수도 있다.'는 것을 의미한다. 라이브러리의 API 문서를 작성하거나 읽어본 경우 문서에서 It can be NULL 또는 It can Not be NULL 등의 부연 설명을 본 적이 있을 것이다. 그리고 전달 인자로 NULL이 전달되어도 되는지 문서를 보기 전에는 알 수 없다. 그러나 스위프트에서 옵셔널 하나만으로 이 의미를 충분히 표현할 수 있기 때문에 문법적 표현만으로 모든 의미를 전달할 수 있다. 게다가 옵셔널과 옵셔널이 아닌 값은 철저히 다른 타입으로 인식하기 때문에 컴파일할 때 오류를 바로 걸러낼 수 있다.
 
    
    > 옵셔널 사용
 nil은 옵셔널 변수 또는 상수가 아니면 nil을 할당할 수 없다. 변수 또는 상수에 정말 값이 없을 때만 nil로 표현한다. 함수형 프로그래밍 패러다임에서 자주 등장하는 Monad와 개념이 같다.
 
 그래서 옵셔널의 사용은 많은 의미를 축약해서 표현하는 것과 같다. 옵셔널을 읽을 때 '해당 변수 또는 상수에는 값이 없을 수 있다. 즉, 변수 또는 상수가 nil일 수도 있으므로 사용에 주의하라'는 뜻으로 직관으로 받아들일 수 있다. 값이 없는 옵셔널 변수 또는 상수에 (강제로) 접근하려면 런타임 오류가 발생한다. 그렇게 되면 OS가 프로그램을 강제 종료시킬 확률이 매우 높다.
 */
var myName: String = "YJ"
//myName = nil //오류 -> error: 09.optional.playground:16:10: error: 'nil' cannot be assigned to type 'String'
var optionalTest: String? = "YJ"
print(optionalTest)
//옵셔널 타입의 값을 print로 출력하면 Optional("YJ")라고 출력되는 것이 정상이다.
//또, 옵셔널 타입의 값을 print 함수의 매개변수로 전달하면 컴파일러 경고가 날 수도 있다.

optionalTest = nil
print(optionalTest)

/**
 사실 var optional: Optional<String>처럼 옵셔널을 조금 더 명확하게 써줄 수 있다. 옵셔널은 언제 사용할까? 왜 굳이 변수에 nil이 있음을 가정해야 할까? 이 질문에 답할 수 있는 예로 우리가 만든 함수에 전달되는 전달인자의 값이 잘못된 값일 경우 제대로 처리하지 못했음을 nil을 반환하여 표현하는 것을 들 수 있다. 물론 기능상 심각한 오류라면 별도로 처리하는 것이 옳지만, 간단히 nil을 반환하여 오류가 있음을 알릴 수도 있다. 또는 매개변수를 굳이 넘기지 않아도 된다는 뜻으로 매개변수의 타입을 옵셔널로 정의할 수도 있다.
 
 또한 타입 추론을 사용할 때 nil을 할당하는 경우가 생긴다. 예를 들어 컴파일러가 enum 타입으로 데이터 타입을 추론했고, 원시 값이 열거형의 case에 해당하지 않으면 열거형 인스턴스 생성에 실패하여 nil 반환하는 경우가 생긴다. 앞서 설명한 함수 처리 실패 유형에 해당하는 것이다.
 
 옵셔널의 더 놀라운 점은 열거형으로 구현되어 있다는 것이다.
 */


