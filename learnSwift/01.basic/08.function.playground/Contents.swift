import UIKit
import Foundation

/**
  함수
 함수 대부분은 작업의 가장 작은 단위이자 하나의 작은 프로그램이기도 하다. "하나의 프로그램은 하나의 큰 함수다."라는 말이 있듯이, 함수는 프로그램을 이루는 주된 요소 중 하나이다. 함수는 프로그램을 이루는 주된 요소 중 하나이다. 스위프트에서 함수는 일급 객체이기 때문에 하나의 값으로도 사용할 수 있다.
 
 
> 함수와 메소드
 함수와 메소드는 기본적으로 같다. 다만 상황이나 위치에 따라 다른 용어로 부르는 것뿐이다. 구조체, 열거형 등 특정 타입에 연관되어 사용하는 함수를 메소드, 모듈 전체에서 전역적으로 사용할 수 있는 함수를 함수라고 부른다. 즉, 함수가 위치하거나 사용되는 범위 등에 따라 호칭이 달라지는 것 뿐이다.
 
> 함수의 정의와 호출
 조건문과 반복문 같은 스위프트의 다른 문법과 달리 함수에서는 소괄호를 생략할 수 없다. 스위프트의 함수는 오버라이드와 오버로드를 모두 지원한다. 따라서 매개변수의 타입이 다르면 같은 이름의 함수를 여러 개 만들 수 있고, 매개변수의 개수가 달라도 같은 이름의 함수를 만들 수 있다.
 
        * 기본적인 함수의 정의와 호출
    스위프트의 함수는 자유도가 굉장히 높은 문법 중 하나이다. 기본적으로 함수의 이름과 매개변수, 반환 타입 등을 사용하여 함수를 정의한다. 함수를 정의하는 키워드는 func이다. 함수 이름을 지정해준 후 매개변수는 소괄호로 감싸준다. 반환 타입을 명시하기 전에는 ->를 이용해여 어떤 타입이 반환되리 것인지를 명시해준다. 반환을 위한 키워드는 다른 언어와 같이 'return'이다.
 
            func [함수 이름] ( [매개 변수 ...] ) -> [반환 타입] {
                            
                            [실행 구문]
 
                return [반환 값]
            }
 */

func hello(name:String)-> String{
    return "Hello \(name)!"
}

let helloHenry: String = hello(name: "Henry");
print(helloHenry)

func introduce(name: String) -> String {
    "제 이름은 \(name) 입니다."
}
let introduceJenny: String = introduce(name: "JENNY");
print(introduceJenny)
/**
    기본 형태는 다른 언어와 비슷하다 그렇지만 생략할 수 있거나 추가 가능한 부분을 살펴보면 스위프트에서 함수를 얼마나 다양하게 정의할 수 있는지 알 수 있다. introduce: 함수에서 볼 수 있듯 return 키워드를 생략할 수 있다. 함수 내부의 코드가 단 한줄의 표현이고, 그 표현의 결과 값이 타입의 함수의 반환 타입과 일치한다면 return을 생략해도 반환이 된다.
        {
            매개변수와 전달인자
            매개변수는 함수를 정의할 때 외부로부터 받아들이는 전달 값의 이름을 의미한다. 전달인자(Argument), 혹은 인자는 함수를 실제로 호출할 때 전달하는 값을 의미한다. hello(name:) 함수에서 매개변수는 'name'이고 전달 받은 값인 "Jenny"는 전달 인자이다.
        }
 */
