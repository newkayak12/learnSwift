import UIKit

/**
          >  서브스크립트
 클래스, 구조체, 열거형에는 컬렉션, 리스트, 시퀀스 등 타입의 요소에 접근한 단축 문법인 서브스크립트(subScript)를 정의할 수 있다. 서브스크립트는 별도의 설정자(Setter) 또는 접근자(Getter) 등의 메소드를 구현하지 않아도 인덱스를 통해 값을 설정하거나 가져올 수 있다. 예를 들어서 someArray라는 Array 인스턴스의 index를 통해 해당 인덱스의 값에 접근하고 싶다면 someArray[index]라고 표현하며, someDictionary라는 Dictionary의 key를 통해 해당 키의 값을 가져오고 싶다면 someDictionary[key]라고 표현하는 것이 바로 서브스크립트이다.
 
 한 타입에 여러 개의 서브스크립트를 정의할 수 있으며 다른 타입을 인덱스로 갖는 여러 개의 서브스크립트를 중복 정의(Overload)할 수도 있다. 앞서 예를 들었던 Array와 Dictionary처럼 하나의 매개변수를 가질 수 있으며, 필요에 따라 여러 개의 매개변수를 인덱스로 사용할 수도 있다.
 
 
    1. 서브스크립트 문법
 서브스크립트는 인스턴스 이름 뒤에 대괄호로 감싼 값을 써줌으로써 인스턴스 내부의 특정 값에 접근할 수 있다. 서브스크립트 문법은 연산 프로퍼티나 인스턴스 메소드 문법과 유사한 형태로 볼 수 있다.
 
 서브스크립트는 subscript 키워드를 사용하여 정의한다. 인스턴스 메소드와 비슷하게 매개변수의 개수, 타입, 반환 타입 등을 지정하며, 읽기 쓰기가 가능하도록 구현하거나 읽기 전용으로만 구현할 수 있다. 이는 접근자와 설정자를 사용할 수 있는 연산 프로퍼티의 형태와 유사하다.
 
 아래는 서브스크립트를 정의하는 문법이다. 서브스크립트를 정의하는 코드는 각 타입의 구현부 또는 타입의 익스텐션 구현부에 위치해야 한다.
 
        // 서브스크립트 정의 문법
    subscript(index: Int) -> Int {
        get{
            //서브스크립트 결과값 반환
        }
        set(newValue){
            //설정자 역할 수행
        }
    }
 
 위 예시에서 구현한 서브스크립트 설정자의 newValue의 타입은 서브스크립트의 반환 타입과 동일하다. 연산 프로퍼티 마찬가지로 매개변수를 따로 명시해주지 않으면 설정자의 암시적 전달인자 newValue를 사용할 수 있다. 또, 연산 프로퍼티와 마찬가지로 읽기 전용 프로퍼티를 구현할 떄는 get이나 set 키워드를 사용하지 않고 적절한 값만 반환해주는 형태로 구현해도 된다.
 
        //읽기 전용 서브스크립트
    subscript(index: Int) -> Int{
        get{
                //적절한 서브스크립트 값 반환
        }
    }
 
    subscript(index: Int) -> Int {
        //적절한 서브스크립트 결과값 반환
    }

 위 두 서브스크립트 정의는 동일한 역할을 한다. get 메소드 없이 단순히 값만 반환하도록하면 읽기 전용이 된다. 
 */
